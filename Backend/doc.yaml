swagger: '2.0'
info:
  version: '1.0.0'
  title: Project API
  description: API for managing projects
basePath: /api
schemes:
  - http
paths:
  /projects:
    get:
      summary: Fetch all projects
      description: Returns an array of all projects
      responses:
        200:
          description: An array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
    post:
      summary: Create a new project
      description: Creates a new project with the given title and description
      parameters:
        - in: body
          name: project
          description: The project to create
          schema:
            $ref: '#/definitions/Project'
      responses:
        201:
          description: The created project
          schema:
            $ref: '#/definitions/Project'
  /projects/search:
    get:
      summary: Search projects by title
      description: Returns an array of projects that match the search term in their title
      parameters:
        - in: query
          name: searchTerm
          required: true
          type: string
      responses:
        200:
          description: An array of matching projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  /projects/{id}:
    get:
      summary: Fetch a single project by ID
      description: Returns a single project by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: A single project
          schema:
            $ref: '#/definitions/Project'
    delete:
      summary: Delete a project by ID
      description: Deletes a single project by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: Success message
    put:
      summary: Update a project by ID
      description: Updates a single project by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: body
          name: project
          description: The project updates
          schema:
            $ref: '#/definitions/Project'
      responses:
        200:
          description: The updated project
          schema:
            $ref: '#/definitions/Project'
  /tasks:
    get:
      summary: Fetch all tasks
      description: Returns an array of all tasks, optionally filtered by project
      responses:
        200:
          description: An array of tasks
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
    post:
      summary: Create a new task
      description: Creates a new task with the given details
      parameters:
        - in: body
          name: task
          description: The task to create
          schema:
            $ref: '#/definitions/Task'
      responses:
        201:
          description: The created task
          schema:
            $ref: '#/definitions/Task'
  /tasks/{id}:
    get:
      summary: Fetch a single task by ID
      description: Returns a single task by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: A single task
          schema:
            $ref: '#/definitions/Task'
    delete:
      summary: Delete a task by ID
      description: Deletes a single task by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: Success message
    put:
      summary: Update a task by ID
      description: Updates a single task by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: body
          name: task
          description: The task updates
          schema:
            $ref: '#/definitions/Task'
      responses:
        200:
          description: The updated task
          schema:
            $ref: '#/definitions/Task'
  /register:
    post:
      summary: Register a new user
      description: Creates a new user with the provided information
      parameters:
        - in: body
          name: user
          description: The user to create
          schema:
            type: object
            required:
              - Fname
              - Lname
              - phone
              - email
              - address
              - password
              - dob
              - job
            properties:
              Fname:
                type: string
              Lname:
                type: string
              phone:
                type: string
              email:
                type: string
              address:
                type: string
              password:
                type: string
              dob:
                type: string
                format: date
              job:
                type: string
      responses:
        201:
          description: The registered user's information (excluding password)
          schema:
            $ref: '#/definitions/User'
  /login:
    post:
      summary: Log in as a user
      description: Logs in as a user with the provided email and password
      parameters:
        - in: body
          name: user
          description: The user's login information
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: The logged in user's information (excluding password)
          schema:
            $ref: '#/definitions/User'
definitions:
  Project:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
  Task:
    type: object
    required:
      - title
      - status
      - projectId
    properties:
      title:
        type: string
      description:
        type: string
      status:
        type: string
      dueDate:
        type: string
        format: date
      projectId:
        type: string
  User:
    type: object
    properties:
      Fname:
        type: string
      Lname:
        type: string
      phone:
        type: string
      email:
        type: string
      address:
        type: string
      dob:
        type: string
        format: date
      job:
        type: string