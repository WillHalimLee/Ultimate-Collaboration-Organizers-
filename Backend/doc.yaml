swagger: "2.0"
info:
  version: "1.0.0"
  title: Project API
  description: API for managing projects
basePath: /api
schemes:
  - http
tags:
  - name: Projects
    description: Endpoints related to projects management
  - name: Tasks
    description: Endpoints related to tasks management
  - name: Users
    description: Endpoints related to user registration and login
paths:
  # Projects Section
  /projects:
    get:
      tags:
        - Projects
      summary: Fetch all projects
      description: Returns an array of all projects
      responses:
        200:
          description: An array of projects
          schema:
            type: array
            items:
              $ref: "#/definitions/Project"
    post:
      tags:
        - Projects
      summary: Create a new project
      description: Creates a new project with the given title and description
      parameters:
        - in: body
          name: project
          description: The project to create
          schema:
            $ref: "#/definitions/Project"
      responses:
        201:
          description: The created project
          schema:
            $ref: "#/definitions/Project"

  # Project Search Section
  /projects/search:
    get:
      tags:
        - Projects
      summary: Search projects by title
      description: Returns an array of projects that match the search term in their title
      parameters:
        - in: query
          name: searchTerm
          required: true
          type: string
      responses:
        200:
          description: An array of matching projects
          schema:
            type: array
            items:
              $ref: "#/definitions/Project"

  # Single Project Section
  /projects/{id}:
    get:
      tags:
        - Projects
      summary: Fetch a single project by ID
      description: Returns a single project by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: A single project
          schema:
            $ref: "#/definitions/Project"
    delete:
      tags:
        - Projects
      summary: Delete a project by ID
      description: Deletes a single project by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: Success message
    put:
      tags:
        - Projects
      summary: Update a project by ID
      description: Updates a single project by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: body
          name: project
          description: The project updates
          schema:
            $ref: "#/definitions/Project"
      responses:
        200:
          description: The updated project
          schema:
            $ref: "#/definitions/Project"

  # Tasks Section
  /tasks:
    get:
      tags:
        - Tasks
      summary: Fetch all tasks
      description: Returns an array of all tasks, optionally filtered by project
      responses:
        200:
          description: An array of tasks
          schema:
            type: array
            items:
              $ref: "#/definitions/Task"
    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Creates a new task with the given details
      parameters:
        - in: body
          name: task
          description: The task to create
          schema:
            $ref: "#/definitions/Task"
      responses:
        201:
          description: The created task
          schema:
            $ref: "#/definitions/Task"

  # Single Task Section
  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Fetch a single task by ID
      description: Returns a single task by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: A single task
          schema:
            $ref: "#/definitions/Task"
    delete:
      tags:
        - Tasks
      summary: Delete a task by ID
      description: Deletes a single task by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: Success message
    put:
      tags:
        - Tasks
      summary: Update a task by ID
      description: Updates a single task by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: body
          name: task
          description: The task updates
          schema:
            $ref: "#/definitions/Task"
      responses:
        200:
          description: The updated task
          schema:
            $ref: "#/definitions/Task"

  # User Registration and Authentication Section
  /register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Creates a new user with the provided information
      parameters:
        - in: body
          name: user
          description: The user to create
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: The registered user's information (excluding password)
          schema:
            $ref: "#/definitions/User"

  /login:
    post:
      tags:
        - Users
      summary: Log in as a user
      description: Logs in as a user with the provided email and password
      parameters:
        - in: body
          name: user
          description: The user's login information
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: The logged in user's information (excluding password)
          schema:
            $ref: "#/definitions/User"
  # User Section
  /users:
    get:
      tags:
        - Users
      summary: Fetch all users
      description: Returns an array of all users
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
  /users/{id}:
    get:
      tags:
        - Users
      summary: Fetch a single user by ID
      description: Returns a single user by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: A single user
          schema:
            $ref: "#/definitions/User"
    put:
      tags:
        - Users
      summary: Update a user by ID
      description: Updates a single user by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: body
          name: user
          description: The user updates
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: The updated user
          schema:
            $ref: "#/definitions/User"

  /users/developers:
    get:
      tags:
        - Users
      summary: Fetch all developers
      description: Returns an array of all users with job title 'developer'
      responses:
        200:
          description: An array of developers
          schema:
            type: array
            items:
              $ref: "#/definitions/User"

  /users/developers/{developerId}/stats:
    get:
      tags:
        - Users
      summary: Fetch statistics for a developer
      description: Returns statistics for a developer based on their ID
      parameters:
        - in: path
          name: developerId
          required: true
          type: string
      responses:
        200:
          description: Statistics for the developer
          schema:
            type: object
            properties:
              developer:
                type: string
              stats:
                type: object
                properties:
                  totalTasks:
                    type: integer
                  tasksCompleted:
                    type: integer
                  completionRate:
                    type: string
definitions:
  # Definition Section: Project
  Project:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      developers:
        type: string

  # Definition Section: Task
  Task:
    type: object
    required:
      - title
      - status
      - projectId
    properties:
      title:
        type: string
      description:
        type: string
      status:
        type: string
      dueDate:
        type: date
        format: date
      projectId:
        type: string

  # Definition Section: User
  User:
    type: object
    required:
      - Fname
      - Lname
      - email
      - job
    properties:
      Fname:
        type: string
      Lname:
        type: string
      phone:
        type: string
      email:
        type: string
      address:
        type: string
      dob:
        type: date
        format: date
      job:
        type: string
